<?php

/**
 * @file
 * Contains installation and update hooks.
 */

/**
 * Implements hook_requirements().
 */
function vault_requirements($phase) {
  $requirements = [];

  if ($phase == "runtime") {
    // Ensure the Vault SDK exists.
    $requirements['vault-sdk'] = [
      'title' => 'Vault: PHP SDK',
      'severity' => REQUIREMENT_ERROR,
      'value' => 'missing',
    ];
    if (class_exists('\Vault\Client')) {
      $requirements['vault-sdk']['severity'] = REQUIREMENT_OK;
      $requirements['vault-sdk']['value'] = 'present';
    }

    // Ensure there are credentials configured.
    $requirements['vault-auth-creds'] = [
      'title' => 'Vault: Credentials',
      'severity' => REQUIREMENT_ERROR,
      'value' => 'authentication provider not configured',
    ];

    $config = \Drupal::config('vault.settings');
    if ($provider = $config->get('plugin_auth')) {
      $requirements['vault-auth-creds']['severity'] = REQUIREMENT_OK;
      $requirements['vault-auth-creds']['value'] = "authentication provider configured: {$provider}";
    }

    // Ensure there are credentials configured.
    $requirements['vault-auth-ping'] = [
      'title' => 'Vault: Auth',
      'severity' => REQUIREMENT_ERROR,
      'value' => 'authentication provider unable to authenticate',
    ];

    try {
      $client = \Drupal::service('vault.vault_client');
      if (!$client->getToken()) {
        throw new Exception("Vault token not received");
      }
      $requirements['vault-auth-ping']['severity'] = REQUIREMENT_OK;
      $requirements['vault-auth-ping']['value'] = "authentication provider able to authenticate";
    }
    catch (Exception $e) {
      $requirements['vault-auth-ping']['value'] .= ": " . $e->getMessage();
      watchdog_exception('php', $e);
    }
  }

  return $requirements;
}
